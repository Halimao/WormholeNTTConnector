import{cA as x,a3 as a,cB as L,cC as M,v,a as B,cD as p,cE as d,cF as W,cG as S,cH as k,cI as z,aH as C,cJ as V,Y as J,cK as Y,cL as K,cM as _,cN as X,k as Z,a6 as y,ab as I,bR as F}from"./index-BGLdF6jF.js";import{EvmTokenBridge as tt}from"./index-D4WbU33f-Dfd1dsQV.js";var et=Object.defineProperty,nt=(u,e,t)=>e in u?et(u,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):u[e]=t,h=(u,e,t)=>nt(u,typeof e!="symbol"?e+"":e,t);const T=new x(["function start((bytes32,address,address,address,address,address,uint256,uint256,uint256,uint256)) returns (address,uint16,uint64)","function receiveMessageAndSwap(bytes)"]),rt=new x(["function quoteExactInputSingle((address,address,uint256,uint24,uint160)) public view returns (uint256,uint160,uint32,uint256)"]),at="https://gfx.relayers.xlabs.xyz/api/v1/swap/quote";class ot{static async quoteRelayer(e,t,r){var n;if(y(t)||y(r))throw new Error("how did you get here tho?");const o=I.encode(t.toUniversalAddress().toUint8Array(),!1),c=I.encode(r.toUniversalAddress().toUint8Array(),!1),s={targetChain:S(e),sourceToken:o,targetToken:c};try{const i=await F.post(at,s);return BigInt(i.data.fee)}catch(i){throw F.isAxiosError(i)?new Error(`Error getting relayer fee: ${(n=i.response)==null?void 0:n.statusText}`):i}}}const l=100,D={ETH:[a.tokenId("Arbitrum","native"),a.tokenId("Base","native"),a.tokenId("Ethereum","native"),a.tokenId("Optimism","native")],WETH:[a.tokenId("Arbitrum","0x82aF49447D8a07e3bd95BD0d56f35241523fBab1"),a.tokenId("Avalanche","0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB"),a.tokenId("Base","0x4200000000000000000000000000000000000006"),a.tokenId("Bsc","0x2170Ed0880ac9A755fd29B2688956BD959F933F8"),a.tokenId("Ethereum","0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"),a.tokenId("Optimism","0x4200000000000000000000000000000000000006"),a.tokenId("Polygon","0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619")],wstETH:[a.tokenId("Arbitrum","0x5979D7b546E38E414F7E9822514be443A4800529"),a.tokenId("Base","0xc1CBa3fCea344f92D9239c08C0568f6F2F0ee452"),a.tokenId("Ethereum","0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0"),a.tokenId("Optimism","0x1F32b1c2345538c0c6f582fCB022739c4A194Ebb"),a.tokenId("Polygon","0x03b54A6e9a984069379fae1a4fC4dBAE93B3bCCD")],USDT:[a.tokenId("Arbitrum","0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9"),a.tokenId("Avalanche","0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7"),a.tokenId("Base","0xfde4C96c8593536E31F229EA8f37b2ADa2699bb2"),a.tokenId("Bsc","0x55d398326f99059fF775485246999027B3197955"),a.tokenId("Ethereum","0xdAC17F958D2ee523a2206206994597C13D831ec7"),a.tokenId("Optimism","0x94b008aA00579c1307B0EF2c499aD98a8ce58e58"),a.tokenId("Polygon","0xc2132D05D31c914a87C6611C10748AEb04B58e8F"),a.tokenId("Celo","0x48065fbBE25f71C9282ddf5e1cD6D6A887483D5e")]};class m{constructor(e,t,r,n){if(h(this,"network"),h(this,"chain"),h(this,"provider"),h(this,"contracts"),h(this,"chainId"),h(this,"core"),h(this,"tokenBridge"),this.network=e,this.chain=t,this.provider=r,this.contracts=n,!n.portico)throw new Error("Unsupported chain, no contract addresses for: "+t);this.core=new L(e,t,r,n),this.tokenBridge=new tt(e,t,r,n),this.chainId=M.get(e,t)}static async fromRpc(e,t){const[r,n]=await v.chainFromRpc(e),o=t[n];if(o.network!==r)throw new Error(`Network mismatch: ${o.network} != ${r}`);return new m(r,n,e,o.contracts)}async*transfer(e,t,r,n,o,c,s){const{minAmountStart:i,minAmountFinish:f}=s.swapAmounts;if(i===0n)throw new Error("Invalid min swap amount");if(f===0n)throw new Error("Invalid min swap amount");const b=new B(e).toString(),[w,A]=p(this.network,this.chain,r),[U,P]=p(this.network,t.chain,o),g=d(A),q=d(await this.getTransferrableToken(g)),N=d(t),O=d(P),R=new Date().valueOf()%2**4,$=W.serializeFlagSet({flags:{shouldWrapNative:w,shouldUnwrapNative:U},recipientChain:S(t.chain),bridgeNonce:R,feeTierStart:l,feeTierFinish:l,padding:new Uint8Array(19)}),H=T.encodeFunctionData("start",[[$,g.toLowerCase(),q,O.toLowerCase(),N,c,n.toString(),i.toString(),f.toString(),s.relayerFee.toString()]]),Q=this.getTokenGroup(A.address.toString()),E=this.getPorticoAddress(Q);w||(yield*this.approve(g,b,n,E));const j=await this.core.getMessageFee(),G={to:E,data:H,value:j+(w?n:0n)};yield this.createUnsignedTransaction(k(G,b),"PorticoBridge.Transfer")}async*redeem(e,t){const r=z(t.payload.payload.flagSet.recipientChain),n=t.payload.payload.finalTokenAddress.toNative(r).toString(),o=this.getTokenGroup(n),c=this.getPorticoAddress(o),s=await new C(c,T.fragments,this.provider).getFunction("receiveMessageAndSwap").populateTransaction(V(t)),i=new B(e).toString();yield this.createUnsignedTransaction(k(s,i),"PorticoBridge.Redeem")}async isTransferCompleted(e){return await this.tokenBridge.tokenBridge.isTransferCompleted(J(e.hash))}async quoteSwap(e,t,r,n){const[,o]=p(this.network,this.chain,e),[,c]=p(this.network,this.chain,t),s=d(o),i=d(c);if(Y(s,i))return n;const f=this.getQuoterAddress(r);return(await new C(f,rt.fragments,this.provider).getFunction("quoteExactInputSingle").staticCall([s,i,n,l,0]))[0]}async quoteRelay(e,t){return await ot.quoteRelayer(this.chain,e,t)}async getTransferrableToken(e){const t=a.tokenId(this.chain,e),[,r]=p(this.network,this.chain,t);if(this.chain==="Ethereum")return r;const n=Object.values(D).find(s=>s.find(i=>i.chain===this.chain&&d(i)===d(r)));if(!n)throw new Error(`No token group found for ${e} on ${this.chain}`);const o=n.find(s=>s.chain==="Ethereum");if(!o)throw new Error(`No Ethereum origin token found for ${e} on ${this.chain}`);const c=await this.tokenBridge.getWrappedAsset(o);return a.tokenId(this.chain,c.toString())}supportedTokens(){const e=[];for(const[t,r]of Object.entries(D))for(const n of r)n.chain===this.chain&&e.push({group:t,token:n});return e}getTokenGroup(e){const t=this.supportedTokens().find(r=>d(r.token)===e);if(!t)throw new Error("Token not found");return t.group}async*approve(e,t,r,n){const o=v.getTokenImplementation(this.provider,e);if(await o.allowance(t,n)<r){const c=await o.approve.populateTransaction(n,r);yield this.createUnsignedTransaction(k(c,t),"PorticoBridge.Approve")}}createUnsignedTransaction(e,t){return new K(_(e,this.chainId),this.network,this.chain,t,!1)}getPorticoAddress(e){const t=this.contracts.portico;return e==="USDT"&&t.porticoPancakeSwap||t.porticoUniswap}getQuoterAddress(e){const t=this.contracts.portico;return e==="USDT"&&t.pancakeSwapQuoterV2||t.uniswapQuoterV2}}X(Z,"PorticoBridge",m);export{m as EvmPorticoBridge};
