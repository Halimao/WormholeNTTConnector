import{d2 as w,cC as T,cB as p,aH as y,cE as l,v as d,a as h,cG as g,cH as c,cJ as u,cL as b,cM as v,cN as m,k as f}from"./index-BGLdF6jF.js";var k=Object.defineProperty,A=(s,t,e)=>t in s?k(s,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[t]=e,i=(s,t,e)=>A(s,typeof t!="symbol"?t+"":t,e);class o{constructor(t,e,a,n){if(i(this,"network"),i(this,"chain"),i(this,"provider"),i(this,"contracts"),i(this,"chainId"),i(this,"core"),i(this,"gatewayAddress"),i(this,"gateway"),i(this,"tbtcTokenAddr"),this.network=t,this.chain=e,this.provider=a,this.contracts=n,this.network!=="Mainnet")throw new Error("TBTC is only supported on Mainnet");if(!this.contracts.tbtc)throw new Error("TBTC contract address is required");const r=w.getNativeTbtcToken(this.chain);if(!r)throw new Error("Native tbtc token not found");this.chainId=T.get(t,e),this.core=new p(t,e,a,n),this.gatewayAddress=this.contracts.tbtc,this.gateway=new y(this.gatewayAddress,["function sendTbtc(uint256 amount, uint16 recipientChain, bytes32 recipient, uint256 arbiterFee, uint32 nonce) payable returns (uint64)","function receiveTbtc(bytes calldata encodedVm)"],a),this.tbtcTokenAddr=l(r)}static async fromRpc(t,e){const[a,n]=await d.chainFromRpc(t),r=e[n];if(r.network!==a)throw new Error(`Network mismatch: ${r.network} != ${a}`);return new o(a,n,t,r.contracts)}async*transfer(t,e,a){const n=new h(t).toString(),r=await this.gateway.sendTbtc.populateTransaction(a,g(e.chain),e.address.toUniversalAddress().toUint8Array(),0n,0n);r.value=await this.core.getMessageFee(),yield*this.approve(n,a,this.gatewayAddress),yield this.createUnsignedTransaction(c(r,n),"TBTCBridge.Send")}async*redeem(t,e){if(e.payloadName!=="GatewayTransfer")throw new Error("Invalid VAA payload");const a=new h(t).toString(),n=await this.gateway.receiveTbtc.populateTransaction(u(e));yield this.createUnsignedTransaction(c(n,a),"TBTCBridge.Redeem")}async*approve(t,e,a){const n=d.getTokenImplementation(this.provider,this.tbtcTokenAddr);if(await n.allowance(t,a)<e){const r=await n.approve.populateTransaction(a,e);yield this.createUnsignedTransaction(c(r,t),"TBTC.Approve")}}createUnsignedTransaction(t,e){return new b(v(t,this.chainId),this.network,this.chain,e,!1)}}m(f,"TBTCBridge",o);export{o as EvmTBTCBridge};
